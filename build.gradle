plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'

	id 'org.jlleitschuh.gradle.ktlint' version '12.1.1'

    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.0'
}

group = 'edu.ingsis'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/austral-ingsis/class-redis-streams")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Database dependencies
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Open API and Swagger UI
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:2.6.0"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0"

	// Security dependencies
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    testImplementation 'com.auth0:java-jwt:4.4.0'
    testImplementation("org.mockito.kotlin:mockito-kotlin:4.1.0")
    testImplementation("org.springframework.security:spring-security-test")

	// KotlinX
	implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0'

	// Redis Streams
	implementation 'org.austral.ingsis:redis-streams-mvc:0.1.13'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('copyPreCommitHook', Copy) {
	description = "Copy pre-commit git hook from the scripts to the .git/hooks folder."
	group = "git hooks"
	from "hooks/pre-commit"
	into ".git/hooks"
	doLast {
		def hookFile = file('.git/hooks/pre-commit')
		if (hookFile.exists()) {
			hookFile.setExecutable(true)
		}
	}
}

tasks.build.dependsOn copyPreCommitHook